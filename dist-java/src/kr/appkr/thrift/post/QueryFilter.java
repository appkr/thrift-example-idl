/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kr.appkr.thrift.post;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 쿼리 필터 엔티티
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-12-10")
public class QueryFilter implements org.apache.thrift.TBase<QueryFilter, QueryFilter._Fields>, java.io.Serializable, Cloneable, Comparable<QueryFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryFilter");

  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("sortBy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDirection", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new QueryFilterStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new QueryFilterTupleSchemeFactory();

  /**
   * 검색할 키워드
   */
  public String keyword; // optional
  /**
   * 정렬 기준이 되는 필드
   */
  public String sortBy; // optional
  /**
   * 정렬 방향
   */
  public String sortDirection; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 검색할 키워드
     */
    KEYWORD((short)1, "keyword"),
    /**
     * 정렬 기준이 되는 필드
     */
    SORT_BY((short)2, "sortBy"),
    /**
     * 정렬 방향
     */
    SORT_DIRECTION((short)3, "sortDirection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEYWORD
          return KEYWORD;
        case 2: // SORT_BY
          return SORT_BY;
        case 3: // SORT_DIRECTION
          return SORT_DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KEYWORD,_Fields.SORT_BY,_Fields.SORT_DIRECTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_BY, new org.apache.thrift.meta_data.FieldMetaData("sortBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("sortDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryFilter.class, metaDataMap);
  }

  public QueryFilter() {
    this.keyword = "";

    this.sortBy = "created_at";

    this.sortDirection = "desc";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryFilter(QueryFilter other) {
    if (other.isSetKeyword()) {
      this.keyword = other.keyword;
    }
    if (other.isSetSortBy()) {
      this.sortBy = other.sortBy;
    }
    if (other.isSetSortDirection()) {
      this.sortDirection = other.sortDirection;
    }
  }

  public QueryFilter deepCopy() {
    return new QueryFilter(this);
  }

  @Override
  public void clear() {
    this.keyword = "";

    this.sortBy = "created_at";

    this.sortDirection = "desc";

  }

  /**
   * 검색할 키워드
   */
  public String getKeyword() {
    return this.keyword;
  }

  /**
   * 검색할 키워드
   */
  public QueryFilter setKeyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  public void unsetKeyword() {
    this.keyword = null;
  }

  /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.keyword = null;
    }
  }

  /**
   * 정렬 기준이 되는 필드
   */
  public String getSortBy() {
    return this.sortBy;
  }

  /**
   * 정렬 기준이 되는 필드
   */
  public QueryFilter setSortBy(String sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  public void unsetSortBy() {
    this.sortBy = null;
  }

  /** Returns true if field sortBy is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBy() {
    return this.sortBy != null;
  }

  public void setSortByIsSet(boolean value) {
    if (!value) {
      this.sortBy = null;
    }
  }

  /**
   * 정렬 방향
   */
  public String getSortDirection() {
    return this.sortDirection;
  }

  /**
   * 정렬 방향
   */
  public QueryFilter setSortDirection(String sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  public void unsetSortDirection() {
    this.sortDirection = null;
  }

  /** Returns true if field sortDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetSortDirection() {
    return this.sortDirection != null;
  }

  public void setSortDirectionIsSet(boolean value) {
    if (!value) {
      this.sortDirection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    case SORT_BY:
      if (value == null) {
        unsetSortBy();
      } else {
        setSortBy((String)value);
      }
      break;

    case SORT_DIRECTION:
      if (value == null) {
        unsetSortDirection();
      } else {
        setSortDirection((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEYWORD:
      return getKeyword();

    case SORT_BY:
      return getSortBy();

    case SORT_DIRECTION:
      return getSortDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEYWORD:
      return isSetKeyword();
    case SORT_BY:
      return isSetSortBy();
    case SORT_DIRECTION:
      return isSetSortDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryFilter)
      return this.equals((QueryFilter)that);
    return false;
  }

  public boolean equals(QueryFilter that) {
    if (that == null)
      return false;

    boolean this_present_keyword = true && this.isSetKeyword();
    boolean that_present_keyword = true && that.isSetKeyword();
    if (this_present_keyword || that_present_keyword) {
      if (!(this_present_keyword && that_present_keyword))
        return false;
      if (!this.keyword.equals(that.keyword))
        return false;
    }

    boolean this_present_sortBy = true && this.isSetSortBy();
    boolean that_present_sortBy = true && that.isSetSortBy();
    if (this_present_sortBy || that_present_sortBy) {
      if (!(this_present_sortBy && that_present_sortBy))
        return false;
      if (!this.sortBy.equals(that.sortBy))
        return false;
    }

    boolean this_present_sortDirection = true && this.isSetSortDirection();
    boolean that_present_sortDirection = true && that.isSetSortDirection();
    if (this_present_sortDirection || that_present_sortDirection) {
      if (!(this_present_sortDirection && that_present_sortDirection))
        return false;
      if (!this.sortDirection.equals(that.sortDirection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKeyword()) ? 131071 : 524287);
    if (isSetKeyword())
      hashCode = hashCode * 8191 + keyword.hashCode();

    hashCode = hashCode * 8191 + ((isSetSortBy()) ? 131071 : 524287);
    if (isSetSortBy())
      hashCode = hashCode * 8191 + sortBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetSortDirection()) ? 131071 : 524287);
    if (isSetSortDirection())
      hashCode = hashCode * 8191 + sortDirection.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QueryFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBy()).compareTo(other.isSetSortBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortBy, other.sortBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortDirection()).compareTo(other.isSetSortDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDirection, other.sortDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryFilter(");
    boolean first = true;

    if (isSetKeyword()) {
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
    }
    if (isSetSortBy()) {
      if (!first) sb.append(", ");
      sb.append("sortBy:");
      if (this.sortBy == null) {
        sb.append("null");
      } else {
        sb.append(this.sortBy);
      }
      first = false;
    }
    if (isSetSortDirection()) {
      if (!first) sb.append(", ");
      sb.append("sortDirection:");
      if (this.sortDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDirection);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryFilterStandardSchemeFactory implements SchemeFactory {
    public QueryFilterStandardScheme getScheme() {
      return new QueryFilterStandardScheme();
    }
  }

  private static class QueryFilterStandardScheme extends StandardScheme<QueryFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortBy = iprot.readString();
              struct.setSortByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortDirection = iprot.readString();
              struct.setSortDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keyword != null) {
        if (struct.isSetKeyword()) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortBy != null) {
        if (struct.isSetSortBy()) {
          oprot.writeFieldBegin(SORT_BY_FIELD_DESC);
          oprot.writeString(struct.sortBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortDirection != null) {
        if (struct.isSetSortDirection()) {
          oprot.writeFieldBegin(SORT_DIRECTION_FIELD_DESC);
          oprot.writeString(struct.sortDirection);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryFilterTupleSchemeFactory implements SchemeFactory {
    public QueryFilterTupleScheme getScheme() {
      return new QueryFilterTupleScheme();
    }
  }

  private static class QueryFilterTupleScheme extends TupleScheme<QueryFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKeyword()) {
        optionals.set(0);
      }
      if (struct.isSetSortBy()) {
        optionals.set(1);
      }
      if (struct.isSetSortDirection()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKeyword()) {
        oprot.writeString(struct.keyword);
      }
      if (struct.isSetSortBy()) {
        oprot.writeString(struct.sortBy);
      }
      if (struct.isSetSortDirection()) {
        oprot.writeString(struct.sortDirection);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.keyword = iprot.readString();
        struct.setKeywordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sortBy = iprot.readString();
        struct.setSortByIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sortDirection = iprot.readString();
        struct.setSortDirectionIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

