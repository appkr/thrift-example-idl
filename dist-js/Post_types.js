//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Appkr === 'undefined') {
  Appkr = {};
}
if (typeof Appkr.Thrift === 'undefined') {
  Appkr.Thrift = {};
}
if (typeof Appkr.Thrift.Post === 'undefined') {
  Appkr.Thrift.Post = {};
}
Appkr.Thrift.Post.Post = function(args) {
  this.id = null;
  this.title = null;
  this.content = null;
  this.created_at = null;
  this.updated_at = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
  }
};
Appkr.Thrift.Post.Post.prototype = {};
Appkr.Thrift.Post.Post.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.Post.prototype.write = function(output) {
  output.writeStructBegin('Post');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 5);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.QueryFilter = function(args) {
  this.keyword = '';
  this.sortBy = 'created_at';
  this.sortDirection = 'desc';
  if (args) {
    if (args.keyword !== undefined && args.keyword !== null) {
      this.keyword = args.keyword;
    }
    if (args.sortBy !== undefined && args.sortBy !== null) {
      this.sortBy = args.sortBy;
    }
    if (args.sortDirection !== undefined && args.sortDirection !== null) {
      this.sortDirection = args.sortDirection;
    }
  }
};
Appkr.Thrift.Post.QueryFilter.prototype = {};
Appkr.Thrift.Post.QueryFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sortBy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sortDirection = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.QueryFilter.prototype.write = function(output) {
  output.writeStructBegin('QueryFilter');
  if (this.keyword !== null && this.keyword !== undefined) {
    output.writeFieldBegin('keyword', Thrift.Type.STRING, 1);
    output.writeString(this.keyword);
    output.writeFieldEnd();
  }
  if (this.sortBy !== null && this.sortBy !== undefined) {
    output.writeFieldBegin('sortBy', Thrift.Type.STRING, 2);
    output.writeString(this.sortBy);
    output.writeFieldEnd();
  }
  if (this.sortDirection !== null && this.sortDirection !== undefined) {
    output.writeFieldBegin('sortDirection', Thrift.Type.STRING, 3);
    output.writeString(this.sortDirection);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

