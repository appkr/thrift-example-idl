//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Appkr.Thrift.Post.PostService_all_args = function(args) {
  this.qf = null;
  this.offset = 0;
  this.limit = 10;
  if (args) {
    if (args.qf !== undefined && args.qf !== null) {
      this.qf = new Appkr.Thrift.Post.QueryFilter(args.qf);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
Appkr.Thrift.Post.PostService_all_args.prototype = {};
Appkr.Thrift.Post.PostService_all_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qf = new Appkr.Thrift.Post.QueryFilter();
        this.qf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_all_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_all_args');
  if (this.qf !== null && this.qf !== undefined) {
    output.writeFieldBegin('qf', Thrift.Type.STRUCT, 1);
    this.qf.write(output);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_all_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Appkr.Thrift.Errors.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Appkr.Thrift.Errors.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Appkr.Thrift.Post.Post]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
Appkr.Thrift.Post.PostService_all_result.prototype = {};
Appkr.Thrift.Post.PostService_all_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Appkr.Thrift.Post.Post();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Appkr.Thrift.Errors.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Appkr.Thrift.Errors.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_all_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_all_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_find_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Appkr.Thrift.Post.PostService_find_args.prototype = {};
Appkr.Thrift.Post.PostService_find_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_find_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_find_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_find_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Appkr.Thrift.Errors.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Appkr.Thrift.Errors.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Appkr.Thrift.Post.Post(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
Appkr.Thrift.Post.PostService_find_result.prototype = {};
Appkr.Thrift.Post.PostService_find_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Appkr.Thrift.Post.Post();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Appkr.Thrift.Errors.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Appkr.Thrift.Errors.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_find_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_find_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_store_args = function(args) {
  this.post = null;
  if (args) {
    if (args.post !== undefined && args.post !== null) {
      this.post = new Appkr.Thrift.Post.Post(args.post);
    }
  }
};
Appkr.Thrift.Post.PostService_store_args.prototype = {};
Appkr.Thrift.Post.PostService_store_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.post = new Appkr.Thrift.Post.Post();
        this.post.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_store_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_store_args');
  if (this.post !== null && this.post !== undefined) {
    output.writeFieldBegin('post', Thrift.Type.STRUCT, 1);
    this.post.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_store_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Appkr.Thrift.Errors.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Appkr.Thrift.Errors.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Appkr.Thrift.Post.Post(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
Appkr.Thrift.Post.PostService_store_result.prototype = {};
Appkr.Thrift.Post.PostService_store_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Appkr.Thrift.Post.Post();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Appkr.Thrift.Errors.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Appkr.Thrift.Errors.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Appkr.Thrift.Post.PostService_store_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_store_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Appkr.Thrift.Post.PostServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Appkr.Thrift.Post.PostServiceClient.prototype = {};
Appkr.Thrift.Post.PostServiceClient.prototype.all = function(qf, offset, limit, callback) {
  if (callback === undefined) {
    this.send_all(qf, offset, limit);
    return this.recv_all();
  } else {
    var postData = this.send_all(qf, offset, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_all);
  }
};

Appkr.Thrift.Post.PostServiceClient.prototype.send_all = function(qf, offset, limit, callback) {
  this.output.writeMessageBegin('all', Thrift.MessageType.CALL, this.seqid);
  var args = new Appkr.Thrift.Post.PostService_all_args();
  args.qf = qf;
  args.offset = offset;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Appkr.Thrift.Post.PostServiceClient.prototype.recv_all = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Appkr.Thrift.Post.PostService_all_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'all failed: unknown result';
};
Appkr.Thrift.Post.PostServiceClient.prototype.find = function(id, callback) {
  if (callback === undefined) {
    this.send_find(id);
    return this.recv_find();
  } else {
    var postData = this.send_find(id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_find);
  }
};

Appkr.Thrift.Post.PostServiceClient.prototype.send_find = function(id, callback) {
  this.output.writeMessageBegin('find', Thrift.MessageType.CALL, this.seqid);
  var args = new Appkr.Thrift.Post.PostService_find_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Appkr.Thrift.Post.PostServiceClient.prototype.recv_find = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Appkr.Thrift.Post.PostService_find_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'find failed: unknown result';
};
Appkr.Thrift.Post.PostServiceClient.prototype.store = function(post, callback) {
  if (callback === undefined) {
    this.send_store(post);
    return this.recv_store();
  } else {
    var postData = this.send_store(post, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_store);
  }
};

Appkr.Thrift.Post.PostServiceClient.prototype.send_store = function(post, callback) {
  this.output.writeMessageBegin('store', Thrift.MessageType.CALL, this.seqid);
  var args = new Appkr.Thrift.Post.PostService_store_args();
  args.post = post;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Appkr.Thrift.Post.PostServiceClient.prototype.recv_store = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Appkr.Thrift.Post.PostService_store_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'store failed: unknown result';
};
